// Code generated by "scopegen"; DO NOT EDIT.
package transactionmetadata

type ServiceScope struct{}

var Scopes = map[string]string{
	"https://auth.bnk.to/transactionmetadata.read":  "View transactionmetadata data",
	"https://auth.bnk.to/transactionmetadata.write": "Manage transactionmetadata data",
}

var AuthScopes = map[string][]string{
	"/transactionmetadata.TransactionMetadataService/CreateComment":   {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/CreateImage":     {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/CreateNarrative": {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/CreateTag":       {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/CreateWhereTag":  {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/DeleteComment":   {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/DeleteImage":     {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/DeleteNarrative": {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/DeleteTag":       {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/DeleteWhereTag":  {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/GetComment":      {"https://auth.bnk.to/transactionmetadata.read"},
	"/transactionmetadata.TransactionMetadataService/GetComments":     {"https://auth.bnk.to/transactionmetadata.read"},
	"/transactionmetadata.TransactionMetadataService/GetImage":        {"https://auth.bnk.to/transactionmetadata.read"},
	"/transactionmetadata.TransactionMetadataService/GetImages":       {"https://auth.bnk.to/transactionmetadata.read"},
	"/transactionmetadata.TransactionMetadataService/GetNarrative":    {"https://auth.bnk.to/transactionmetadata.read"},
	"/transactionmetadata.TransactionMetadataService/GetNarratives":   {"https://auth.bnk.to/transactionmetadata.read"},
	"/transactionmetadata.TransactionMetadataService/GetTag":          {"https://auth.bnk.to/transactionmetadata.read"},
	"/transactionmetadata.TransactionMetadataService/GetTags":         {"https://auth.bnk.to/transactionmetadata.read"},
	"/transactionmetadata.TransactionMetadataService/GetWhereTag":     {"https://auth.bnk.to/transactionmetadata.read"},
	"/transactionmetadata.TransactionMetadataService/GetWhereTags":    {"https://auth.bnk.to/transactionmetadata.read"},
	"/transactionmetadata.TransactionMetadataService/UpdateComment":   {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/UpdateImage":     {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/UpdateNarrative": {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/UpdateTag":       {"https://auth.bnk.to/transactionmetadata.write"},
	"/transactionmetadata.TransactionMetadataService/UpdateWhereTag":  {"https://auth.bnk.to/transactionmetadata.write"},
}

// Any allows a loose challenge, for claims containing any of the method scopes.
//
// Use All method as a default for OAuth2 style scopes.  Any is useful with more complex scope definitions.
func (svcSc *ServiceScope) Any(method string, claims []string) bool {
	ch := AuthScopes[method]
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				return true
			}
		}
	}
	return len(ch) == 0
}

// All is the default OAuth2 challenge method, ensuring claims contains all method scopes.
func (svcSc *ServiceScope) All(method string, claims []string) bool {
	ch := AuthScopes[method]
	if len(ch) > len(claims) {
		return false
	}
scopes:
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				continue scopes
			}
		}
		return false
	}
	return true
}
