// Code generated by "scopegen"; DO NOT EDIT.
package counterpartymetadata

type ServiceScope struct{}

var Scopes = map[string]string{
	"https://auth.bnk.to/counterpartymetadata.read":  "View counterpartymetadata data",
	"https://auth.bnk.to/counterpartymetadata.write": "Manage counterpartymetadata data",
}

var AuthScopes = map[string][]string{
	"/counterpartymetadata.CounterpartyMetadataService/CreateCorporateLocation": {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreateImageURL":          {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreateMoreInfo":          {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreateOpenCorporatesURL": {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreatePhysicalLocation":  {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreatePrivateAlias":      {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreatePublicAlias":       {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/CreateURL":               {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeleteCorporateLocation": {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeleteImageURL":          {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeleteMoreInfo":          {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeleteOpenCorporatesURL": {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeletePhysicalLocation":  {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeletePrivateAlias":      {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeletePublicAlias":       {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/DeleteURL":               {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/GetCorporateLocation":    {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetCorporateLocations":   {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetImageURL":             {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetImageURLs":            {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetMoreInfo":             {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetMoreInfos":            {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetOpenCorporatesURL":    {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetOpenCorporatesURLs":   {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetOtherAccountMetadata": {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetPhysicalLocation":     {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetPhysicalLocations":    {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetPrivateAlias":         {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetPrivateAliases":       {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetPublicAlias":          {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetPublicAliases":        {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetURL":                  {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/GetURLs":                 {"https://auth.bnk.to/counterpartymetadata.read"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdateCorporateLocation": {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdateImageURL":          {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdateMoreInfo":          {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdateOpenCorporatesURL": {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdatePhysicalLocation":  {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdatePrivateAlias":      {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdatePublicAlias":       {"https://auth.bnk.to/counterpartymetadata.write"},
	"/counterpartymetadata.CounterpartyMetadataService/UpdateURL":               {"https://auth.bnk.to/counterpartymetadata.write"},
}

// Any allows a loose challenge, for claims containing any of the method scopes.
//
// Use All method as a default for OAuth2 style scopes.  Any is useful with more complex scope definitions.
func (svcSc *ServiceScope) Any(method string, claims []string) bool {
	ch := AuthScopes[method]
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				return true
			}
		}
	}
	return len(ch) == 0
}

// All is the default OAuth2 challenge method, ensuring claims contains all method scopes.
func (svcSc *ServiceScope) All(method string, claims []string) bool {
	ch := AuthScopes[method]
	if len(ch) > len(claims) {
		return false
	}
scopes:
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				continue scopes
			}
		}
		return false
	}
	return true
}
