// Code generated by "scopegen"; DO NOT EDIT.
package customer

type ServiceScope struct{}

var Scopes = map[string]string{
	"https://auth.bnk.to/customer.read":  "View customer data",
	"https://auth.bnk.to/customer.write": "Manage customer data",
}

var AuthScopes = map[string][]string{
	"/customer.CustomerService/AddAddressToCustomer":                {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/AddSocialMediaHandle":                {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/CreateCreditLimitOrder":              {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/CreateCustomer":                      {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/CreateUserCustomerLink":              {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/DeleteCustomerAddress":               {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/DeleteTaxResidence":                  {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/GetCRMEvents":                        {"https://auth.bnk.to/customer.read"},
	"/customer.CustomerService/GetCreditLimitOrder":                 {"https://auth.bnk.to/customer.read"},
	"/customer.CustomerService/GetCreditLimitOrderByID":             {"https://auth.bnk.to/customer.read"},
	"/customer.CustomerService/GetCustomerAddresses":                {"https://auth.bnk.to/customer.read"},
	"/customer.CustomerService/GetCustomerByCustomerID":             {"https://auth.bnk.to/customer.read"},
	"/customer.CustomerService/GetCustomerByCustomerNumber":         {"https://auth.bnk.to/customer.read"},
	"/customer.CustomerService/GetCustomerSocialMediaHandles":       {"https://auth.bnk.to/customer.read"},
	"/customer.CustomerService/GetCustomersForCurrentUser":          {"https://auth.bnk.to/customer.read"},
	"/customer.CustomerService/GetCustomersForCurrentUserAtBank":    {"https://auth.bnk.to/customer.read"},
	"/customer.CustomerService/GetFirehoseCustomer":                 {"https://auth.bnk.to/customer.read"},
	"/customer.CustomerService/GetTaxResidenceOfCustomer":           {"https://auth.bnk.to/customer.read"},
	"/customer.CustomerService/UpdateCustomerAddress":               {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/UpdateCustomerBranch":                {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/UpdateCustomerCreditLimit":           {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/UpdateCustomerCreditRatingAndSource": {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/UpdateCustomerEmail":                 {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/UpdateCustomerIdentity":              {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/UpdateCustomerMobileNumber":          {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/UpdateCustomerNumber":                {"https://auth.bnk.to/customer.write"},
	"/customer.CustomerService/UpdateCustomerOtherData":             {"https://auth.bnk.to/customer.write"},
}

// Any allows a loose challenge, for claims containing any of the method scopes.
//
// Use All method as a default for OAuth2 style scopes.  Any is useful with more complex scope definitions.
func (svcSc *ServiceScope) Any(method string, claims []string) bool {
	ch := AuthScopes[method]
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				return true
			}
		}
	}
	return len(ch) == 0
}

// All is the default OAuth2 challenge method, ensuring claims contains all method scopes.
func (svcSc *ServiceScope) All(method string, claims []string) bool {
	ch := AuthScopes[method]
	if len(ch) > len(claims) {
		return false
	}
scopes:
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				continue scopes
			}
		}
		return false
	}
	return true
}
