// Code generated by "scopegen"; DO NOT EDIT.
package bank

type ServiceScope struct{}

var Scopes = map[string]string{
	"https://auth.bnk.to/bank.read":  "View bank data",
	"https://auth.bnk.to/bank.write": "Manage bank data",
}

var AuthScopes = map[string][]string{
	"/bank.BankService/CreateBank":                  {"https://auth.bnk.to/bank.write"},
	"/bank.BankService/CreateTranscationTypeAtBank": {"https://auth.bnk.to/bank.write"},
	"/bank.BankService/DeleteBank":                  {"https://auth.bnk.to/bank.write"},
	"/bank.BankService/GetBank":                     {"https://auth.bnk.to/bank.read"},
	"/bank.BankService/GetBanks":                    {"https://auth.bnk.to/bank.read"},
	"/bank.BankService/UpdateBank":                  {"https://auth.bnk.to/bank.write"},
}

// Any allows a loose challenge, for claims containing any of the method scopes.
//
// Use All method as a default for OAuth2 style scopes.  Any is useful with more complex scope definitions.
func (svcSc *ServiceScope) Any(method string, claims []string) bool {
	ch := AuthScopes[method]
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				return true
			}
		}
	}
	return len(ch) == 0
}

// All is the default OAuth2 challenge method, ensuring claims contains all method scopes.
func (svcSc *ServiceScope) All(method string, claims []string) bool {
	ch := AuthScopes[method]
	if len(ch) > len(claims) {
		return false
	}
scopes:
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				continue scopes
			}
		}
		return false
	}
	return true
}
